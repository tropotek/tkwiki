<?php

namespace App\Console;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Command\LockableTrait;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Zap\Zapv2;

/**
 * @author Tropotek <info@tropotek.com>
 */
class Zap extends \Bs\Console\Console
{
    use LockableTrait;

    /**
     *
     */
    protected function configure(): void
    {
        $this->setName('zap')
            ->setAliases(array('z'))
            //->addArgument('filename', InputArgument::REQUIRED, 'The Database backup file (tgz) generated by tkDbBackup.')
            //->addOption('noLibs', 'X', InputOption::VALUE_NONE, 'Do not show the ttek libs.')
            ->setDescription('Zap API test');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        if (!$this->lock()) {
            $output->writeln('The command is already running in another process.');
            return self::SUCCESS;
        }
/*
        $api_key = "u4fqfffouq612bv9ssnkoqn0ps";
        $target = "https://godar.ttek.org/Projects/tkwiki/";

        //$zap = new Zapv2('tcp://localhost:8080');
        $zap = new Zapv2('tcp://192.168.0.41:8080');
        //$zap = new Zapv2('http://192.168.0.41:8080');
        //$zap = new Zapv2('192.168.0.41');

        $version = @$zap->core->version();
        if (is_null($version)) {
            $output->writeln("PHP API error");
            //echo "PHP API error\n";
            exit();
        } else {
            $output->writeln("version: $version");
            //echo "version: $version\n";
        }

        $output->writeln("Spidering target $target");
        //echo "Spidering target $target\n";

        // Response JSON looks like {"scan":"1"}
        $scan_id = $zap->spider->scan($target, null, null, null, $api_key);
        $count = 0;
        while (true) {
            if ($count > 10) exit();
            // Response JSON looks like {"status":"50"}
            $progress = intval($zap->spider->status($scan_id));
            $output->writeln("Spider progress $progress");
            //printf("Spider progress %d\n", $progress);
            if ($progress >= 100) break;
            sleep(2);
            $count++;
        }
        $output->writeln("Spider completed");
        //echo "Spider completed\n";
        // Give the passive scanner a chance to finish
        sleep(5);

        $output->writeln("Scanning target $target");
        //echo "Scanning target $target\n";
        // Response JSON for error looks like {"code":"url_not_found", "message":"URL is not found"}
        $scan_id = $zap->ascan->scan($target, null, null, null, null, null, $api_key);
        $count = 0;
        while (true) {
            if ($count > 10) exit();
            $progress = intval($zap->ascan->status($scan_id));
            $output->writeln("Scan progress $progress");
            //printf("Scan progress %d\n", $progress);
            if ($progress >= 100) break;
            sleep(2);
            $count++;
        }
        $output->writeln("Scan completed");
        //echo "Scan completed\n";

        // Report the results
        $output->writeln("Hosts: " . implode(",", $zap->core->hosts()));
        //echo "Hosts: " . implode(",", $zap->core->hosts()) . "\n";
        $alerts = $zap->core->alerts($target, "", "");
        $output->writeln("Alerts (" . count($alerts) . "):");
        //echo "Alerts (" . count($alerts) . "):\n";
        $output->writeln(print_r($alerts, true));

*/
        $output->writeln('');
        $this->writeComment('Complete!!!');

        $this->release();   // release lock
        return Command::SUCCESS;
    }


}
